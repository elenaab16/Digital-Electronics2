
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080017e  0080017e  000007b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001894  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad9  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aac  00000000  00000000  00002c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a89  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_18>
  4c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3c       	cpi	r26, 0xC3	; 195
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
}/* lcd_init */
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 212:	8e e0       	ldi	r24, 0x0E	; 14
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 222:	80 e1       	ldi	r24, 0x10	; 16
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
 22a:	ec e7       	ldi	r30, 0x7C	; 124
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	8f 77       	andi	r24, 0x7F	; 127
 232:	80 83       	st	Z, r24
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24
	
    // Set input channel to ADC0
    ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 23a:	80 81       	ld	r24, Z
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	80 83       	st	Z, r24
	
    // Enable ADC module
    ADCSRA |= (1<<ADEN);
 240:	ea e7       	ldi	r30, 0x7A	; 122
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	80 68       	ori	r24, 0x80	; 128
 248:	80 83       	st	Z, r24
	
    // Enable conversion complete interrupt
    ADCSRA |= (1<<ADIE);
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
	
    // Set clock prescaler to 128
    ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 250:	80 81       	ld	r24, Z
 252:	87 60       	ori	r24, 0x07	; 7
 254:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
    TIM1_overflow_interrupt_enable();
 256:	ef e6       	ldi	r30, 0x6F	; 111
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
 260:	e1 e8       	ldi	r30, 0x81	; 129
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	80 83       	st	Z, r24
 26a:	80 81       	ld	r24, Z
 26c:	83 60       	ori	r24, 0x03	; 3
 26e:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 270:	87 e6       	ldi	r24, 0x67	; 103
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 c1 02 	call	0x582	; 0x582 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 278:	78 94       	sei
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0xa6>

0000027c <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24

}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <__vector_21+0x2c>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <__vector_21+0x2e>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
	
	uint16_t value = 0;
	char lcd_string[4] = "0000";
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	90 e3       	ldi	r25, 0x30	; 48
 2dc:	9a 83       	std	Y+2, r25	; 0x02
 2de:	89 83       	std	Y+1, r24	; 0x01
 2e0:	9c 83       	std	Y+4, r25	; 0x04
 2e2:	8b 83       	std	Y+3, r24	; 0x03

	value = ADC;    // Copy ADC result to 16-bit variable
 2e4:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2e8:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	be 01       	movw	r22, r28
 2f0:	6f 5f       	subi	r22, 0xFF	; 255
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	c8 01       	movw	r24, r16
 2f6:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(value, lcd_string, 10);               // Convert decimal value to string
	
    lcd_clrscr();
 2fa:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
	lcd_gotoxy(1, 0); lcd_puts("value:");
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(3, 1); lcd_puts("key:");
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 316:	87 e0       	ldi	r24, 0x07	; 7
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	
	if(value == 1022){
 31e:	0e 3f       	cpi	r16, 0xFE	; 254
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	18 07       	cpc	r17, r24
 324:	e9 f4       	brne	.+58     	; 0x360 <__vector_21+0xba>
		
		lcd_gotoxy(8, 0); lcd_puts(lcd_string);				  // Put ADC value in decimal
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("3FE");					  // Put ADC value in hexadecimal
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 33e:	82 e1       	ldi	r24, 0x12	; 18
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("none   ");				  // Put button name here
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 34e:	86 e1       	ldi	r24, 0x16	; 22
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		uart_puts("none");
 356:	8e e1       	ldi	r24, 0x1E	; 30
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
 35e:	9e c0       	rjmp	.+316    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
	}else if(value == 650){
 360:	0a 38       	cpi	r16, 0x8A	; 138
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	18 07       	cpc	r17, r24
 366:	e9 f4       	brne	.+58     	; 0x3a2 <__vector_21+0xfc>
		
		lcd_gotoxy(8, 0); lcd_puts(lcd_string);				  // Put ADC value in decimal
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("28A");                    // Put ADC value in hexadecimal
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8d e0       	ldi	r24, 0x0D	; 13
 37c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 380:	83 e2       	ldi	r24, 0x23	; 35
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("Select  ");               // Put button name here	
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 390:	87 e2       	ldi	r24, 0x27	; 39
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	    uart_puts("Select");
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
 3a0:	7d c0       	rjmp	.+250    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
	}else if(value == 402){
 3a2:	02 39       	cpi	r16, 0x92	; 146
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	18 07       	cpc	r17, r24
 3a8:	e9 f4       	brne	.+58     	; 0x3e4 <__vector_21+0x13e>
		
		lcd_gotoxy(8, 0); lcd_puts(lcd_string);                // Put ADC value in decimal
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("192");                     // Put ADC value in hexadecimal
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 3c2:	87 e3       	ldi	r24, 0x37	; 55
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("Left     ");               // Put button name here
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 3d2:	8b e3       	ldi	r24, 0x3B	; 59
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		uart_puts("Left");
 3da:	85 e4       	ldi	r24, 0x45	; 69
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
 3e2:	5c c0       	rjmp	.+184    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
	}else if(value == 245){
 3e4:	05 3f       	cpi	r16, 0xF5	; 245
 3e6:	11 05       	cpc	r17, r1
 3e8:	e9 f4       	brne	.+58     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

		lcd_gotoxy(8, 0); lcd_puts(lcd_string);                 // Put ADC value in decimal
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("F5");                       // Put ADC value in hexadecimal
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 402:	8a e4       	ldi	r24, 0x4A	; 74
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("Down     ");				// Put button name here
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 412:	8d e4       	ldi	r24, 0x4D	; 77
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		uart_puts("Down");
 41a:	87 e5       	ldi	r24, 0x57	; 87
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
 422:	3c c0       	rjmp	.+120    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
	}else if(value == 101){
 424:	05 36       	cpi	r16, 0x65	; 101
 426:	11 05       	cpc	r17, r1
 428:	e9 f4       	brne	.+58     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		lcd_gotoxy(8, 0); lcd_puts(lcd_string);                 // Put ADC value in decimal
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("65");                       // Put ADC value in hexadecimal
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8d e0       	ldi	r24, 0x0D	; 13
 43e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 442:	8c e5       	ldi	r24, 0x5C	; 92
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("Up     ");					// Put button name here
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	88 e0       	ldi	r24, 0x08	; 8
 44e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 452:	8f e5       	ldi	r24, 0x5F	; 95
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		uart_puts("Up");
 45a:	87 e6       	ldi	r24, 0x67	; 103
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
 462:	1c c0       	rjmp	.+56     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		
	}else{
		

		lcd_gotoxy(8, 0); lcd_puts(lcd_string);                  // Put ADC value in decimal
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(13,0); lcd_puts("00");                        // Put ADC value in hexadecimal
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	8d e0       	ldi	r24, 0x0D	; 13
 478:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 47c:	8a e6       	ldi	r24, 0x6A	; 106
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(8, 1); lcd_puts("Right     ");				 // Put button name here
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
 48c:	8d e6       	ldi	r24, 0x6D	; 109
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		uart_puts("Right");
 494:	88 e7       	ldi	r24, 0x78	; 120
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 0d 03 	call	0x61a	; 0x61a <uart_puts>
	uint8_t c;
	uint8_t inc;
	uint8_t par = 0;


	c = uart_getc();
 49c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <uart_getc>
		par = 0;
	}
	
	

 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	ff 91       	pop	r31
 4ae:	ef 91       	pop	r30
 4b0:	bf 91       	pop	r27
 4b2:	af 91       	pop	r26
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	7f 91       	pop	r23
 4ba:	6f 91       	pop	r22
 4bc:	5f 91       	pop	r21
 4be:	4f 91       	pop	r20
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	2f 93       	push	r18
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 4e6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 4ea:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 4ee:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 4f0:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <UART_RxHead>
 4f4:	ef 5f       	subi	r30, 0xFF	; 255
 4f6:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 4f8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <UART_RxTail>
 4fc:	e9 17       	cp	r30, r25
 4fe:	39 f0       	breq	.+14     	; 0x50e <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 500:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	ed 57       	subi	r30, 0x7D	; 125
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	20 83       	st	Z, r18
 50c:	01 c0       	rjmp	.+2      	; 0x510 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 50e:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 510:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <__data_end>
 514:	89 2b       	or	r24, r25
 516:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
}
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	2f 91       	pop	r18
 524:	0f 90       	pop	r0
 526:	0f be       	out	0x3f, r0	; 63
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	ef 93       	push	r30
 53e:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 540:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <UART_TxHead>
 544:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <UART_TxTail>
 548:	98 17       	cp	r25, r24
 54a:	69 f0       	breq	.+26     	; 0x566 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 54c:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <UART_TxTail>
 550:	ef 5f       	subi	r30, 0xFF	; 255
 552:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 554:	e0 93 81 01 	sts	0x0181, r30	; 0x800181 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ed 55       	subi	r30, 0x5D	; 93
 55c:	fe 4f       	sbci	r31, 0xFE	; 254
 55e:	80 81       	ld	r24, Z
 560:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 564:	05 c0       	rjmp	.+10     	; 0x570 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 566:	e1 ec       	ldi	r30, 0xC1	; 193
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	8f 7d       	andi	r24, 0xDF	; 223
 56e:	80 83       	st	Z, r24
    }
}
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 582:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <UART_TxHead>
    UART_TxTail = 0;
 586:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <UART_TxTail>
    UART_RxHead = 0;
 58a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <UART_RxHead>
    UART_RxTail = 0;
 58e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 592:	99 23       	and	r25, r25
 594:	1c f4       	brge	.+6      	; 0x59c <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 596:	22 e0       	ldi	r18, 0x02	; 2
 598:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 59c:	90 78       	andi	r25, 0x80	; 128
 59e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 5a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 5a6:	88 e9       	ldi	r24, 0x98	; 152
 5a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 5b2:	08 95       	ret

000005b4 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 5b4:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <UART_RxHead>
 5b8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <UART_RxTail>
 5bc:	98 17       	cp	r25, r24
 5be:	a9 f0       	breq	.+42     	; 0x5ea <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 5c0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <UART_RxTail>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 5c8:	e9 2f       	mov	r30, r25
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	ed 57       	subi	r30, 0x7D	; 125
 5ce:	fe 4f       	sbci	r31, 0xFE	; 254
 5d0:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 5d2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>

    /* store buffer index */
    UART_RxTail = tmptail;
 5d6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <UART_RxTail>

    UART_LastRxError = 0;
 5da:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
    return (lastRxError << 8) + data;
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	98 2f       	mov	r25, r24
 5e2:	88 27       	eor	r24, r24
 5e4:	82 0f       	add	r24, r18
 5e6:	91 1d       	adc	r25, r1
 5e8:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 5ee:	08 95       	ret

000005f0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 5f0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <UART_TxHead>
 5f4:	2f 5f       	subi	r18, 0xFF	; 255
 5f6:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 5f8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <UART_TxTail>
 5fc:	29 17       	cp	r18, r25
 5fe:	e1 f3       	breq	.-8      	; 0x5f8 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 600:	e2 2f       	mov	r30, r18
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	ed 55       	subi	r30, 0x5D	; 93
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 60a:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 60e:	e1 ec       	ldi	r30, 0xC1	; 193
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	80 62       	ori	r24, 0x20	; 32
 616:	80 83       	st	Z, r24
 618:	08 95       	ret

0000061a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	ec 01       	movw	r28, r24
    while (*s)
 620:	88 81       	ld	r24, Y
 622:	88 23       	and	r24, r24
 624:	31 f0       	breq	.+12     	; 0x632 <uart_puts+0x18>
 626:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 628:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 62c:	89 91       	ld	r24, Y+
 62e:	81 11       	cpse	r24, r1
 630:	fb cf       	rjmp	.-10     	; 0x628 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <__itoa_ncheck>:
 638:	bb 27       	eor	r27, r27
 63a:	4a 30       	cpi	r20, 0x0A	; 10
 63c:	31 f4       	brne	.+12     	; 0x64a <__itoa_ncheck+0x12>
 63e:	99 23       	and	r25, r25
 640:	22 f4       	brpl	.+8      	; 0x64a <__itoa_ncheck+0x12>
 642:	bd e2       	ldi	r27, 0x2D	; 45
 644:	90 95       	com	r25
 646:	81 95       	neg	r24
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	0c 94 28 03 	jmp	0x650	; 0x650 <__utoa_common>

0000064e <__utoa_ncheck>:
 64e:	bb 27       	eor	r27, r27

00000650 <__utoa_common>:
 650:	fb 01       	movw	r30, r22
 652:	55 27       	eor	r21, r21
 654:	aa 27       	eor	r26, r26
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	aa 1f       	adc	r26, r26
 65c:	a4 17       	cp	r26, r20
 65e:	10 f0       	brcs	.+4      	; 0x664 <__utoa_common+0x14>
 660:	a4 1b       	sub	r26, r20
 662:	83 95       	inc	r24
 664:	50 51       	subi	r21, 0x10	; 16
 666:	b9 f7       	brne	.-18     	; 0x656 <__utoa_common+0x6>
 668:	a0 5d       	subi	r26, 0xD0	; 208
 66a:	aa 33       	cpi	r26, 0x3A	; 58
 66c:	08 f0       	brcs	.+2      	; 0x670 <__utoa_common+0x20>
 66e:	a9 5d       	subi	r26, 0xD9	; 217
 670:	a1 93       	st	Z+, r26
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	79 f7       	brne	.-34     	; 0x654 <__utoa_common+0x4>
 676:	b1 11       	cpse	r27, r1
 678:	b1 93       	st	Z+, r27
 67a:	11 92       	st	Z+, r1
 67c:	cb 01       	movw	r24, r22
 67e:	0c 94 41 03 	jmp	0x682	; 0x682 <strrev>

00000682 <strrev>:
 682:	dc 01       	movw	r26, r24
 684:	fc 01       	movw	r30, r24
 686:	67 2f       	mov	r22, r23
 688:	71 91       	ld	r23, Z+
 68a:	77 23       	and	r23, r23
 68c:	e1 f7       	brne	.-8      	; 0x686 <strrev+0x4>
 68e:	32 97       	sbiw	r30, 0x02	; 2
 690:	04 c0       	rjmp	.+8      	; 0x69a <strrev+0x18>
 692:	7c 91       	ld	r23, X
 694:	6d 93       	st	X+, r22
 696:	70 83       	st	Z, r23
 698:	62 91       	ld	r22, -Z
 69a:	ae 17       	cp	r26, r30
 69c:	bf 07       	cpc	r27, r31
 69e:	c8 f3       	brcs	.-14     	; 0x692 <strrev+0x10>
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
