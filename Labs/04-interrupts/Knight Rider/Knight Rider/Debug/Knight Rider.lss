
Knight Rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8a  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cb  00000000  00000000  00001db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  //Clear bit(and not)
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);  //Set bit(or)
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_write_high+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_write_high+0xa>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <main>:
 * on Multi-function shield with internal 8- and 16-bit timer modules.
 */
int main(void)
{
    /* Configuration of  LEDs */
	GPIO_config_output(&DDRC, LED_RED1);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	87 e2       	ldi	r24, 0x27	; 39
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&DDRC, LED_RED1);
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	87 e2       	ldi	r24, 0x27	; 39
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
    GPIO_config_output(&DDRC, LED_RED2);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	87 e2       	ldi	r24, 0x27	; 39
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&DDRC, LED_RED2);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
    GPIO_config_output(&DDRC, LED_RED3);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	87 e2       	ldi	r24, 0x27	; 39
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&DDRC, LED_RED3);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	87 e2       	ldi	r24, 0x27	; 39
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
	GPIO_config_output(&DDRC, LED_RED4);
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	87 e2       	ldi	r24, 0x27	; 39
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&DDRC, LED_RED4);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	87 e2       	ldi	r24, 0x27	; 39
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
	GPIO_config_output(&DDRC, LED_RED5);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	87 e2       	ldi	r24, 0x27	; 39
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&DDRC, LED_RED5);	
 124:	64 e0       	ldi	r22, 0x04	; 4
 126:	87 e2       	ldi	r24, 0x27	; 39
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    /* Configuration of 8-bit Timer/Counter0 */
    //TIM0_overflow_1s();
	TIM0_overflow_interrupt_enable();
 12e:	ee e6       	ldi	r30, 0x6E	; 110
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24

    /* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
    TIM1_overflow_262ms();
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	80 83       	st	Z, r24
 142:	80 81       	ld	r24, Z
 144:	83 60       	ori	r24, 0x03	; 3
 146:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 148:	ef e6       	ldi	r30, 0x6F	; 111
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	80 83       	st	Z, r24

    /* Configuration of 8-bit Timer/Counter2 */
	//TIM2_overflow_33ms();
	TIM2_overflow_interrupt_enable();
 152:	e0 e7       	ldi	r30, 0x70	; 112
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 83       	st	Z, r24
   

    // Enables interrupts by setting the global interrupt mask
    sei();
 15c:	78 94       	sei
		   
		   TIM1_overflow_262ms();
		   
	   }else{
		   
		   TIM1_overflow_1s();
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
    sei();

    // Infinite loop
    while (1)
    {
       if(bit_is_clear(PIND,BUTTON)){
 162:	48 99       	sbic	0x09, 0	; 9
 164:	07 c0       	rjmp	.+14     	; 0x174 <main+0xaa>
		   
		   TIM1_overflow_262ms();
 166:	80 81       	ld	r24, Z
 168:	8b 7f       	andi	r24, 0xFB	; 251
 16a:	80 83       	st	Z, r24
 16c:	80 81       	ld	r24, Z
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	80 83       	st	Z, r24
 172:	f7 cf       	rjmp	.-18     	; 0x162 <main+0x98>
		   
	   }else{
		   
		   TIM1_overflow_1s();
 174:	80 81       	ld	r24, Z
 176:	8c 7f       	andi	r24, 0xFC	; 252
 178:	80 83       	st	Z, r24
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
 180:	f0 cf       	rjmp	.-32     	; 0x162 <main+0x98>

00000182 <__vector_13>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows. Toggle LED D2 on 
 * Multi-function shield. */
ISR(TIMER1_OVF_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
		GPIO_write_high(&DDRC,leds[4]);
			
	}else if(i == 0){
			
		r = 0;
		GPIO_write_high(&DDRC,leds[4]);
 1a4:	64 e0       	ldi	r22, 0x04	; 4
 1a6:	87 e2       	ldi	r24, 0x27	; 39
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_write_high>
		 
		 i--;
		 
	 }
		
	 GPIO_write_low(&DDRC,leds[i]);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	87 e2       	ldi	r24, 0x27	; 39
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
