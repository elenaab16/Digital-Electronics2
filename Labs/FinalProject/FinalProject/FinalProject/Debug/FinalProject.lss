
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000a3a  00000ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800192  00800192  00000b60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c40  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bff  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001000  00000000  00000000  00003587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d2  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ceb  00000000  00000000  00004fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005cad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_18>
  4c:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3e       	cpi	r26, 0xE6	; 230
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
  9e:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_read>:
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_read+0xc>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_read+0x8>
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	8f 27       	eor	r24, r31
 128:	81 70       	andi	r24, 0x01	; 1
 12a:	08 95       	ret

0000012c <check>:
	static int password = 0;
	static int correct[4] ={1234,0000,3939,1998};		//The right passwords 
	static int ok = 3;
	
	
	if(ot == 1){			//If door/password time expired, password is reseted
 12c:	61 30       	cpi	r22, 0x01	; 1
 12e:	71 05       	cpc	r23, r1
 130:	11 f5       	brne	.+68     	; 0x176 <check+0x4a>
		
		i = 0;
 132:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <i.2318+0x1>
 136:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <i.2318>
		
		if(ok == 1){
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	39 f4       	brne	.+14     	; 0x154 <check+0x28>
			
			ok = 3;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 152:	04 c0       	rjmp	.+8      	; 0x15c <check+0x30>
		}else{
			
			ok = 0;
 154:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 158:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
				
		lcd_gotoxy(8,2);
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	0e 94 10 03 	call	0x620	; 0x620 <lcd_gotoxy>
	    lcd_puts("----");
 164:	88 e0       	ldi	r24, 0x08	; 8
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 22 03 	call	0x644	; 0x644 <lcd_puts>
		
		
		password = 0;
 16c:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 170:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
 174:	88 c0       	rjmp	.+272    	; 0x286 <check+0x15a>
		
	}else{					//If time don not expire, evaluate the key pressed
		
		
		if(i != 4) {		//Until password is full
 176:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <i.2318>
 17a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <i.2318+0x1>
 17e:	24 30       	cpi	r18, 0x04	; 4
 180:	31 05       	cpc	r19, r1
 182:	d9 f1       	breq	.+118    	; 0x1fa <check+0xce>
			
			ok = 3;
 184:	43 e0       	ldi	r20, 0x03	; 3
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 18c:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
			
			if(i == 0){
 190:	21 15       	cp	r18, r1
 192:	31 05       	cpc	r19, r1
 194:	31 f4       	brne	.+12     	; 0x1a2 <check+0x76>
				
				ovtime = 1; //The first digit in the password is introduced, the password count start
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <ovtime+0x1>
 19e:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <ovtime>
		    }
			
			
			if((digit >= 0) && (digit <= 9) ){
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	91 05       	cpc	r25, r1
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <check+0x7e>
 1a8:	6e c0       	rjmp	.+220    	; 0x286 <check+0x15a>
				
				password = password*10 + digit;
 1aa:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <__data_end>
 1ae:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <__data_end+0x1>
 1b2:	ba 01       	movw	r22, r20
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	46 0f       	add	r20, r22
 1c6:	57 1f       	adc	r21, r23
 1c8:	84 0f       	add	r24, r20
 1ca:	95 1f       	adc	r25, r21
 1cc:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 1d0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
				lcd_gotoxy(i+8,2);
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	82 0f       	add	r24, r18
 1da:	0e 94 10 03 	call	0x620	; 0x620 <lcd_gotoxy>
				lcd_puts("*");
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 22 03 	call	0x644	; 0x644 <lcd_puts>
				i++;
 1e6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <i.2318>
 1ea:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <i.2318+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <i.2318+0x1>
 1f4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <i.2318>
 1f8:	46 c0       	rjmp	.+140    	; 0x286 <check+0x15a>
				
			 }
			
		}else{
			
			i = 0;
 1fa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <i.2318+0x1>
 1fe:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <i.2318>
			ovtime = 0;
 202:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <ovtime+0x1>
 206:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <ovtime>
			
			lcd_gotoxy(8,2);
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	88 e0       	ldi	r24, 0x08	; 8
 20e:	0e 94 10 03 	call	0x620	; 0x620 <lcd_gotoxy>
			lcd_puts("----");
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 22 03 	call	0x644	; 0x644 <lcd_puts>
			
			ok = 0;
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
 21a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 21e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 222:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <timdoor>
 226:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <timdoor+0x1>
 22a:	82 3d       	cpi	r24, 0xD2	; 210
 22c:	44 e0       	ldi	r20, 0x04	; 4
 22e:	94 07       	cpc	r25, r20
 230:	29 f0       	breq	.+10     	; 0x23c <check+0x110>
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	61 f0       	breq	.+24     	; 0x24e <check+0x122>
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	04 c0       	rjmp	.+8      	; 0x244 <check+0x118>
					
					ok = 1;
					timdoor = 1;					//Start the door counter
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
					
					ok = 1;
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
			
			ok = 0;
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
 244:	83 36       	cpi	r24, 0x63	; 99
 246:	6f e0       	ldi	r22, 0x0F	; 15
 248:	96 07       	cpc	r25, r22
 24a:	29 f4       	brne	.+10     	; 0x256 <check+0x12a>
 24c:	0c c0       	rjmp	.+24     	; 0x266 <check+0x13a>
					
					ok = 1;
					timdoor = 1;					//Start the door counter
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
					
					ok = 1;
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	50 e0       	ldi	r21, 0x00	; 0
			
			ok = 0;
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
 256:	8e 3c       	cpi	r24, 0xCE	; 206
 258:	97 40       	sbci	r25, 0x07	; 7
 25a:	49 f4       	brne	.+18     	; 0x26e <check+0x142>
					
					ok = 1;
					timdoor = 1;					//Start the door counter
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
					
					ok = 1;
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	04 c0       	rjmp	.+8      	; 0x26e <check+0x142>
					timdoor = 1;					//Start the door counter
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
			
			for(j=0;j<4;j++){
				
				if(password == correct[j]){			//Check the password with the correct codes
					
					ok = 1;
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 272:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 276:	30 93 9e 01 	sts	0x019E, r19	; 0x80019e <timdoor+0x1>
 27a:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <timdoor>
					timdoor = 1;					//Start the door counter
					
				}
		 }
		 
		 password = 0;
 27e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 282:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
	   }
	
	}
		
	return ok;
}
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28e:	08 95       	ret

00000290 <scan>:
static int ovtime = 0;		//counter for introducing the password
static int timdoor = 0;		//counter for time that is open the door

// scan digit  

int scan(int row1, int row2, int row3, int row4){
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
 2a2:	8b 01       	movw	r16, r22
 2a4:	6a 01       	movw	r12, r20
 2a6:	79 01       	movw	r14, r18
	static int state = 3;		//Inform about the keyboard state (writing, correct, wrong)

	static uint8_t columns[] = {COL0, COL1, COL2};
	static uint8_t i = 0;		//Number of time the key is pressed
	
	if(ovtime != 0){			//Key counter
 2a8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <ovtime>
 2ac:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <ovtime+0x1>
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	29 f0       	breq	.+10     	; 0x2be <scan+0x2e>
		
		ovtime++;
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <ovtime+0x1>
 2ba:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <ovtime>
	}
	
	if(timdoor != 0){			//Door counter
 2be:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timdoor>
 2c2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timdoor+0x1>
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <scan+0x44>
		
		timdoor++;
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <timdoor+0x1>
 2d0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <timdoor>
	}
	
	
	if((GPIO_read(&PINC,ROW1) == 0) && (GPIO_read(&PINC,ROW2) == 0) && (GPIO_read(&PINC,ROW3) == 0) && (GPIO_read(&PINC,ROW4) == 0)){
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	86 e2       	ldi	r24, 0x26	; 38
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 2de:	81 11       	cpse	r24, r1
 2e0:	38 c0       	rjmp	.+112    	; 0x352 <scan+0xc2>
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	86 e2       	ldi	r24, 0x26	; 38
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 2ec:	81 11       	cpse	r24, r1
 2ee:	31 c0       	rjmp	.+98     	; 0x352 <scan+0xc2>
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	86 e2       	ldi	r24, 0x26	; 38
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 2fa:	81 11       	cpse	r24, r1
 2fc:	2a c0       	rjmp	.+84     	; 0x352 <scan+0xc2>
 2fe:	64 e0       	ldi	r22, 0x04	; 4
 300:	86 e2       	ldi	r24, 0x26	; 38
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 308:	81 11       	cpse	r24, r1
 30a:	23 c0       	rjmp	.+70     	; 0x352 <scan+0xc2>
		
		GPIO_write_low(&DDRD,columns[i]);		//If there is no pressed key, we move the O to the right column
 30c:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <i.2313>
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	e1 5f       	subi	r30, 0xF1	; 241
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	60 81       	ld	r22, Z
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
		
		
		if( i == 2){
 320:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <i.2313>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	19 f4       	brne	.+6      	; 0x32e <scan+0x9e>
			
			i = 0;
 328:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <i.2313>
 32c:	03 c0       	rjmp	.+6      	; 0x334 <scan+0xa4>
			
		}else{
				
			i++;
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <i.2313>
		}
		
		
		GPIO_write_high(&DDRD,columns[i]);
 334:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <i.2313>
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e1 5f       	subi	r30, 0xF1	; 241
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	60 81       	ld	r22, Z
 340:	8a e2       	ldi	r24, 0x2A	; 42
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		puls = 0;		//No pressed key
 348:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <puls.2309+0x1>
 34c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <puls.2309>
 350:	d1 c0       	rjmp	.+418    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
		
		
	}else{
		
		puls = 1;		//Pressed key
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <puls.2309+0x1>
 35a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <puls.2309>
		
		//Detecting the key pressed
		
		if((i == 0) && ((row1 ==1) && (row2 ==0) && (row3 ==0) && (row4 ==0))){
 35e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <i.2313>
 362:	81 11       	cpse	r24, r1
 364:	45 c0       	rjmp	.+138    	; 0x3f0 <scan+0x160>
 366:	c1 30       	cpi	r28, 0x01	; 1
 368:	d1 05       	cpc	r29, r1
 36a:	81 f4       	brne	.+32     	; 0x38c <scan+0xfc>
 36c:	01 2b       	or	r16, r17
 36e:	09 f0       	breq	.+2      	; 0x372 <scan+0xe2>
 370:	c1 c0       	rjmp	.+386    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 372:	cd 28       	or	r12, r13
 374:	09 f0       	breq	.+2      	; 0x378 <scan+0xe8>
 376:	be c0       	rjmp	.+380    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 378:	ef 28       	or	r14, r15
 37a:	09 f0       	breq	.+2      	; 0x37e <scan+0xee>
 37c:	bb c0       	rjmp	.+374    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 10; //*	
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 386:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 38a:	b4 c0       	rjmp	.+360    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 0) && ((row1 == 0) && (row2 == 1) && (row3 == 0) && (row4 == 0))){
 38c:	cd 2b       	or	r28, r29
 38e:	09 f0       	breq	.+2      	; 0x392 <scan+0x102>
 390:	b1 c0       	rjmp	.+354    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 392:	01 30       	cpi	r16, 0x01	; 1
 394:	11 05       	cpc	r17, r1
 396:	69 f4       	brne	.+26     	; 0x3b2 <scan+0x122>
 398:	cd 28       	or	r12, r13
 39a:	09 f0       	breq	.+2      	; 0x39e <scan+0x10e>
 39c:	ab c0       	rjmp	.+342    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 39e:	ef 28       	or	r14, r15
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <scan+0x114>
 3a2:	a8 c0       	rjmp	.+336    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 7; //7		
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 3ac:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 3b0:	a1 c0       	rjmp	.+322    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 0) && ((row1 == 0) && (row2 == 0) && (row3 == 1) && (row4 == 0))){
 3b2:	01 2b       	or	r16, r17
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <scan+0x128>
 3b6:	9e c0       	rjmp	.+316    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	c8 16       	cp	r12, r24
 3bc:	d1 04       	cpc	r13, r1
 3be:	51 f4       	brne	.+20     	; 0x3d4 <scan+0x144>
 3c0:	ef 28       	or	r14, r15
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <scan+0x136>
 3c4:	97 c0       	rjmp	.+302    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 4; //4	
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 3ce:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 3d2:	90 c0       	rjmp	.+288    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 0) && ((row1 == 0) && (row2 == 0) && (row3 == 0) && (row4 == 1))){
 3d4:	cd 28       	or	r12, r13
 3d6:	09 f0       	breq	.+2      	; 0x3da <scan+0x14a>
 3d8:	8d c0       	rjmp	.+282    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 3da:	ea 94       	dec	r14
 3dc:	ef 28       	or	r14, r15
 3de:	09 f0       	breq	.+2      	; 0x3e2 <scan+0x152>
 3e0:	89 c0       	rjmp	.+274    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 1; //1
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 3ea:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 3ee:	82 c0       	rjmp	.+260    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 1)  && ((row1 == 1) && (row2 == 0) && (row3 == 0) && (row4 == 0))){
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <scan+0x166>
 3f4:	43 c0       	rjmp	.+134    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 3f6:	c1 30       	cpi	r28, 0x01	; 1
 3f8:	d1 05       	cpc	r29, r1
 3fa:	71 f4       	brne	.+28     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fc:	01 2b       	or	r16, r17
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	79 c0       	rjmp	.+242    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 402:	cd 28       	or	r12, r13
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	76 c0       	rjmp	.+236    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 408:	ef 28       	or	r14, r15
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	73 c0       	rjmp	.+230    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 0; //0
 40e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <key.2308+0x1>
 412:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <key.2308>
 416:	6e c0       	rjmp	.+220    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 1)  && ((row1 == 0) && (row2 == 1) && (row3 == 0) && (row4 == 0))){
 418:	cd 2b       	or	r28, r29
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	6b c0       	rjmp	.+214    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 41e:	01 30       	cpi	r16, 0x01	; 1
 420:	11 05       	cpc	r17, r1
 422:	69 f4       	brne	.+26     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 424:	cd 28       	or	r12, r13
 426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	65 c0       	rjmp	.+202    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 42a:	ef 28       	or	r14, r15
 42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	62 c0       	rjmp	.+196    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 8; //8
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 438:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 43c:	5b c0       	rjmp	.+182    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 1)  && ((row1 == 0) && (row2 == 0) && (row3 == 1) && (row4 == 0))){
 43e:	01 2b       	or	r16, r17
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	58 c0       	rjmp	.+176    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	c8 16       	cp	r12, r24
 448:	d1 04       	cpc	r13, r1
 44a:	51 f4       	brne	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44c:	ef 28       	or	r14, r15
 44e:	09 f0       	breq	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	51 c0       	rjmp	.+162    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 5; //5
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 45a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 45e:	4a c0       	rjmp	.+148    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 1)  && ((row1 == 0) && (row2 == 0) && (row3 == 0) && (row4 == 1))){
 460:	cd 28       	or	r12, r13
 462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	47 c0       	rjmp	.+142    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 466:	ea 94       	dec	r14
 468:	ef 28       	or	r14, r15
 46a:	09 f0       	breq	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46c:	43 c0       	rjmp	.+134    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 2; //2
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 476:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 47a:	3c c0       	rjmp	.+120    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 2)  && ((row1 == 1) && (row2 == 0) && (row3 == 0) && (row4 == 0))){
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	d1 f5       	brne	.+116    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 480:	c1 30       	cpi	r28, 0x01	; 1
 482:	d1 05       	cpc	r29, r1
 484:	69 f4       	brne	.+26     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 486:	01 2b       	or	r16, r17
 488:	a9 f5       	brne	.+106    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 48a:	cd 28       	or	r12, r13
 48c:	99 f5       	brne	.+102    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 48e:	ef 28       	or	r14, r15
 490:	89 f5       	brne	.+98     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 11; //#
 492:	8b e0       	ldi	r24, 0x0B	; 11
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 49a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 49e:	2a c0       	rjmp	.+84     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 2)  && ((row1 == 0) && (row2 == 1) && (row3 == 0) && (row4 == 0))){
 4a0:	cd 2b       	or	r28, r29
 4a2:	41 f5       	brne	.+80     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4a4:	01 30       	cpi	r16, 0x01	; 1
 4a6:	11 05       	cpc	r17, r1
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4aa:	cd 28       	or	r12, r13
 4ac:	19 f5       	brne	.+70     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4ae:	ef 28       	or	r14, r15
 4b0:	09 f5       	brne	.+66     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 9; //9
 4b2:	89 e0       	ldi	r24, 0x09	; 9
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 4ba:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 4be:	1a c0       	rjmp	.+52     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 2)  && ((row1 == 0) && (row2 == 0) && (row3 == 1) && (row4 == 0))){
 4c0:	01 2b       	or	r16, r17
 4c2:	c1 f4       	brne	.+48     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	c8 16       	cp	r12, r24
 4c8:	d1 04       	cpc	r13, r1
 4ca:	49 f4       	brne	.+18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4cc:	ef 28       	or	r14, r15
 4ce:	91 f4       	brne	.+36     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 6; //6
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 4d8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>
 4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
					
		}else if((i == 2)  && ((row1 == 0) && (row2 == 0) && (row3 == 0) && (row4 == 1))){
 4de:	cd 28       	or	r12, r13
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e2:	ea 94       	dec	r14
 4e4:	ef 28       	or	r14, r15
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			
			key = 3; //3
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <key.2308+0x1>
 4f0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <key.2308>

		
	}
	
	
		  if( timdoor >= 91){			//It takes 3 second to close the door (3/33ms is aproximatly 91)
 4f4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <timdoor>
 4f8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <timdoor+0x1>
 4fc:	8b 35       	cpi	r24, 0x5B	; 91
 4fe:	91 05       	cpc	r25, r1
 500:	8c f0       	brlt	.+34     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		 
				 state=check(key,1);	
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <key.2308>
 50a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <key.2308+0x1>
 50e:	0e 94 96 00 	call	0x12c	; 0x12c <check>
 512:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state.2311+0x1>
 516:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state.2311>
				 timdoor = 0;
 51a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <timdoor+0x1>
 51e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <timdoor>
 522:	30 c0       	rjmp	.+96     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		 
		  }else{
			  
				if(ovtime >= 120){		//It takes 4 second to reset the password if there are not any more keys pressed (4/33ms is aproximatly 120)
 524:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <ovtime>
 528:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <ovtime+0x1>
 52c:	88 37       	cpi	r24, 0x78	; 120
 52e:	91 05       	cpc	r25, r1
 530:	8c f0       	brlt	.+34     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
				  
					state=check(key,1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <key.2308>
 53a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <key.2308+0x1>
 53e:	0e 94 96 00 	call	0x12c	; 0x12c <check>
 542:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state.2311+0x1>
 546:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state.2311>
					ovtime = 0;
 54a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <ovtime+0x1>
 54e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <ovtime>
 552:	18 c0       	rjmp	.+48     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				  
				 }else{
				  
					if((ppuls == 0) && (puls == 1)){		//Detect if any key is pressed
 554:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <ppuls.2310>
 558:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <ppuls.2310+0x1>
 55c:	89 2b       	or	r24, r25
 55e:	91 f4       	brne	.+36     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 560:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <puls.2309>
 564:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <puls.2309+0x1>
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	61 f4       	brne	.+24     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					  
						state = check(key,0);
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <key.2308>
 574:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <key.2308+0x1>
 578:	0e 94 96 00 	call	0x12c	; 0x12c <check>
 57c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state.2311+0x1>
 580:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state.2311>
			  
			  
			}
		   
		   
			ppuls = puls;		//Save the previous value to know if it changes
 584:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <puls.2309>
 588:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <puls.2309+0x1>
 58c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <ppuls.2310+0x1>
 590:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <ppuls.2310>
			
			return state;
	
}
 594:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state.2311>
 598:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state.2311+0x1>
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	08 95       	ret

000005ae <toggle_e>:
 5ae:	29 9a       	sbi	0x05, 1	; 5
 5b0:	00 00       	nop
 5b2:	29 98       	cbi	0x05, 1	; 5
 5b4:	08 95       	ret

000005b6 <lcd_write>:
 5b6:	cf 93       	push	r28
 5b8:	c8 2f       	mov	r28, r24
 5ba:	66 23       	and	r22, r22
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <lcd_write+0xc>
 5be:	28 9a       	sbi	0x05, 0	; 5
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <lcd_write+0xe>
 5c2:	28 98       	cbi	0x05, 0	; 5
 5c4:	54 9a       	sbi	0x0a, 4	; 10
 5c6:	55 9a       	sbi	0x0a, 5	; 10
 5c8:	56 9a       	sbi	0x0a, 6	; 10
 5ca:	57 9a       	sbi	0x0a, 7	; 10
 5cc:	5f 98       	cbi	0x0b, 7	; 11
 5ce:	5e 98       	cbi	0x0b, 6	; 11
 5d0:	5d 98       	cbi	0x0b, 5	; 11
 5d2:	5c 98       	cbi	0x0b, 4	; 11
 5d4:	cc 23       	and	r28, r28
 5d6:	0c f4       	brge	.+2      	; 0x5da <lcd_write+0x24>
 5d8:	5f 9a       	sbi	0x0b, 7	; 11
 5da:	c6 fd       	sbrc	r28, 6
 5dc:	5e 9a       	sbi	0x0b, 6	; 11
 5de:	c5 fd       	sbrc	r28, 5
 5e0:	5d 9a       	sbi	0x0b, 5	; 11
 5e2:	c4 fd       	sbrc	r28, 4
 5e4:	5c 9a       	sbi	0x0b, 4	; 11
 5e6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 5ea:	5f 98       	cbi	0x0b, 7	; 11
 5ec:	5e 98       	cbi	0x0b, 6	; 11
 5ee:	5d 98       	cbi	0x0b, 5	; 11
 5f0:	5c 98       	cbi	0x0b, 4	; 11
 5f2:	c3 fd       	sbrc	r28, 3
 5f4:	5f 9a       	sbi	0x0b, 7	; 11
 5f6:	c2 fd       	sbrc	r28, 2
 5f8:	5e 9a       	sbi	0x0b, 6	; 11
 5fa:	c1 fd       	sbrc	r28, 1
 5fc:	5d 9a       	sbi	0x0b, 5	; 11
 5fe:	c0 fd       	sbrc	r28, 0
 600:	5c 9a       	sbi	0x0b, 4	; 11
 602:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 606:	5c 9a       	sbi	0x0b, 4	; 11
 608:	5d 9a       	sbi	0x0b, 5	; 11
 60a:	5e 9a       	sbi	0x0b, 6	; 11
 60c:	5f 9a       	sbi	0x0b, 7	; 11
 60e:	8a ef       	ldi	r24, 0xFA	; 250
 610:	8a 95       	dec	r24
 612:	f1 f7       	brne	.-4      	; 0x610 <lcd_write+0x5a>
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <lcd_command>:
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_write>
 61e:	08 95       	ret

00000620 <lcd_gotoxy>:
 620:	61 11       	cpse	r22, r1
 622:	04 c0       	rjmp	.+8      	; 0x62c <lcd_gotoxy+0xc>
 624:	80 58       	subi	r24, 0x80	; 128
 626:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 62a:	08 95       	ret
 62c:	80 54       	subi	r24, 0x40	; 64
 62e:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 632:	08 95       	ret

00000634 <lcd_clrscr>:
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 63a:	08 95       	ret

0000063c <lcd_putc>:
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_write>
 642:	08 95       	ret

00000644 <lcd_puts>:
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
 64a:	21 96       	adiw	r28, 0x01	; 1
 64c:	fc 01       	movw	r30, r24
 64e:	80 81       	ld	r24, Z
 650:	88 23       	and	r24, r24
 652:	29 f0       	breq	.+10     	; 0x65e <lcd_puts+0x1a>
 654:	0e 94 1e 03 	call	0x63c	; 0x63c <lcd_putc>
 658:	89 91       	ld	r24, Y+
 65a:	81 11       	cpse	r24, r1
 65c:	fb cf       	rjmp	.-10     	; 0x654 <lcd_puts+0x10>
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <lcd_init>:
 664:	cf 93       	push	r28
 666:	c8 2f       	mov	r28, r24
 668:	20 9a       	sbi	0x04, 0	; 4
 66a:	55 9a       	sbi	0x0a, 5	; 10
 66c:	21 9a       	sbi	0x04, 1	; 4
 66e:	54 9a       	sbi	0x0a, 4	; 10
 670:	55 9a       	sbi	0x0a, 5	; 10
 672:	56 9a       	sbi	0x0a, 6	; 10
 674:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 676:	8f e9       	ldi	r24, 0x9F	; 159
 678:	9f e0       	ldi	r25, 0x0F	; 15
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <lcd_init+0x16>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <lcd_init+0x1c>
 680:	00 00       	nop
 682:	5d 9a       	sbi	0x0b, 5	; 11
 684:	5c 9a       	sbi	0x0b, 4	; 11
 686:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 68a:	81 ee       	ldi	r24, 0xE1	; 225
 68c:	94 e0       	ldi	r25, 0x04	; 4
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <lcd_init+0x2a>
 692:	00 c0       	rjmp	.+0      	; 0x694 <lcd_init+0x30>
 694:	00 00       	nop
 696:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 69a:	95 e1       	ldi	r25, 0x15	; 21
 69c:	9a 95       	dec	r25
 69e:	f1 f7       	brne	.-4      	; 0x69c <lcd_init+0x38>
 6a0:	00 00       	nop
 6a2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 6a6:	85 e1       	ldi	r24, 0x15	; 21
 6a8:	8a 95       	dec	r24
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <lcd_init+0x44>
 6ac:	00 00       	nop
 6ae:	5c 98       	cbi	0x0b, 4	; 11
 6b0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <toggle_e>
 6b4:	95 e1       	ldi	r25, 0x15	; 21
 6b6:	9a 95       	dec	r25
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <lcd_init+0x52>
 6ba:	00 00       	nop
 6bc:	88 e2       	ldi	r24, 0x28	; 40
 6be:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 6c2:	88 e0       	ldi	r24, 0x08	; 8
 6c4:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 6c8:	0e 94 1a 03 	call	0x634	; 0x634 <lcd_clrscr>
 6cc:	86 e0       	ldi	r24, 0x06	; 6
 6ce:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 6d2:	8c 2f       	mov	r24, r28
 6d4:	0e 94 0c 03 	call	0x618	; 0x618 <lcd_command>
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <initialize>:


void initialize(){
	
	//Keyboard columns
	GPIO_config_output(&DDRD, COL0);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	8a e2       	ldi	r24, 0x2A	; 42
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, COL1);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	8a e2       	ldi	r24, 0x2A	; 42
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, COL2);
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	8a e2       	ldi	r24, 0x2A	; 42
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
	GPIO_write_high(&PORTD, COL0);
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	8b e2       	ldi	r24, 0x2B	; 43
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	GPIO_write_high(&PORTD, COL1);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	8b e2       	ldi	r24, 0x2B	; 43
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	GPIO_write_high(&PORTD, COL2);
 70e:	62 e0       	ldi	r22, 0x02	; 2
 710:	8b e2       	ldi	r24, 0x2B	; 43
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	GPIO_config_input_pullup(&DDRC, ROW1);
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	87 e2       	ldi	r24, 0x27	; 39
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, ROW2);
 722:	62 e0       	ldi	r22, 0x02	; 2
 724:	87 e2       	ldi	r24, 0x27	; 39
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, ROW3);
 72c:	63 e0       	ldi	r22, 0x03	; 3
 72e:	87 e2       	ldi	r24, 0x27	; 39
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, ROW4);
 736:	64 e0       	ldi	r22, 0x04	; 4
 738:	87 e2       	ldi	r24, 0x27	; 39
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	
	//Timers
	TIM1_overflow_interrupt_enable();
 740:	ef e6       	ldi	r30, 0x6F	; 111
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 83       	st	Z, r24
	TIM1_overflow_33ms();
 74a:	e1 e8       	ldi	r30, 0x81	; 129
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	8a 7f       	andi	r24, 0xFA	; 250
 752:	80 83       	st	Z, r24
 754:	80 81       	ld	r24, Z
 756:	82 60       	ori	r24, 0x02	; 2
 758:	80 83       	st	Z, r24

	//Initialize LCD display
	lcd_init(LCD_DISP_ON);
 75a:	8c e0       	ldi	r24, 0x0C	; 12
 75c:	0e 94 32 03 	call	0x664	; 0x664 <lcd_init>
	 
	//LEDs
	GPIO_config_output(&DDRB, LED_GREEN);
 760:	64 e0       	ldi	r22, 0x04	; 4
 762:	84 e2       	ldi	r24, 0x24	; 36
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_GREEN);
 76a:	64 e0       	ldi	r22, 0x04	; 4
 76c:	85 e2       	ldi	r24, 0x25	; 37
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	 
	GPIO_config_output(&DDRB, LED_RED);
 774:	63 e0       	ldi	r22, 0x03	; 3
 776:	84 e2       	ldi	r24, 0x24	; 36
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_RED);
 77e:	63 e0       	ldi	r22, 0x03	; 3
 780:	85 e2       	ldi	r24, 0x25	; 37
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	  
	//RELAY
	GPIO_config_output(&DDRC, RELE);
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	87 e2       	ldi	r24, 0x27	; 39
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC, RELE);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	88 e2       	ldi	r24, 0x28	; 40
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	  
	//UART
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 79c:	87 e6       	ldi	r24, 0x67	; 103
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_init>
	
	//Enable interrupts
	sei();
 7a4:	78 94       	sei
 7a6:	08 95       	ret

000007a8 <main>:



int main(void){

	initialize();
 7a8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initialize>
	
	lcd_gotoxy(1, 0);
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 10 03 	call	0x620	; 0x620 <lcd_gotoxy>
	lcd_puts("Enter password:");
 7b4:	82 e1       	ldi	r24, 0x12	; 18
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	0e 94 22 03 	call	0x644	; 0x644 <lcd_puts>
	
	lcd_gotoxy(8,2);
 7bc:	62 e0       	ldi	r22, 0x02	; 2
 7be:	88 e0       	ldi	r24, 0x08	; 8
 7c0:	0e 94 10 03 	call	0x620	; 0x620 <lcd_gotoxy>
	lcd_puts("----");
 7c4:	88 e0       	ldi	r24, 0x08	; 8
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 22 03 	call	0x644	; 0x644 <lcd_puts>
	
	uart_puts("Welcome. Press * to verify the code.\n\n");
 7cc:	82 e2       	ldi	r24, 0x22	; 34
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
	
    while (1){
		
		// Error signaling
		if(state == 1){			// Right code
 7d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
 7d8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <state+0x1>
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	91 05       	cpc	r25, r1
 7e0:	59 f4       	brne	.+22     	; 0x7f8 <main+0x50>
			
			GPIO_write_high(&PORTB, LED_GREEN);
 7e2:	64 e0       	ldi	r22, 0x04	; 4
 7e4:	85 e2       	ldi	r24, 0x25	; 37
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
			GPIO_write_low(&PORTC, RELE);
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	88 e2       	ldi	r24, 0x28	; 40
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 7f6:	ee cf       	rjmp	.-36     	; 0x7d4 <main+0x2c>
			
			
		}else if(state == 0){	// Wrong code 
 7f8:	89 2b       	or	r24, r25
 7fa:	59 f4       	brne	.+22     	; 0x812 <main+0x6a>
			
			GPIO_write_high(&PORTB, LED_RED);
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	85 e2       	ldi	r24, 0x25	; 37
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
			GPIO_write_high(&PORTC, RELE);
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	88 e2       	ldi	r24, 0x28	; 40
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 810:	e1 cf       	rjmp	.-62     	; 0x7d4 <main+0x2c>
			
			
		}else{					// Introducing the code
			
			GPIO_write_low(&PORTB, LED_RED);
 812:	63 e0       	ldi	r22, 0x03	; 3
 814:	85 e2       	ldi	r24, 0x25	; 37
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
			GPIO_write_low(&PORTB, LED_GREEN);
 81c:	64 e0       	ldi	r22, 0x04	; 4
 81e:	85 e2       	ldi	r24, 0x25	; 37
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
			GPIO_write_high(&PORTC, RELE);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	88 e2       	ldi	r24, 0x28	; 40
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 830:	d1 cf       	rjmp	.-94     	; 0x7d4 <main+0x2c>

00000832 <__vector_13>:
	
}

//Timer handler

ISR(TIMER1_OVF_vect){
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	1f 93       	push	r17
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
	static char* open = "The door is open.\n\n";
	static char* close = "The door is close.\n\n";
	static char* code = "The code is being introduced.\n\n";
	static int p_state = 3;

	state = scan(GPIO_read(&PINC,ROW1), GPIO_read(&PINC,ROW2), GPIO_read(&PINC,ROW3), GPIO_read(&PINC,ROW4));
 85a:	64 e0       	ldi	r22, 0x04	; 4
 85c:	86 e2       	ldi	r24, 0x26	; 38
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 864:	18 2f       	mov	r17, r24
 866:	63 e0       	ldi	r22, 0x03	; 3
 868:	86 e2       	ldi	r24, 0x26	; 38
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 870:	d8 2f       	mov	r29, r24
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	86 e2       	ldi	r24, 0x26	; 38
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 87c:	c8 2f       	mov	r28, r24
 87e:	61 e0       	ldi	r22, 0x01	; 1
 880:	86 e2       	ldi	r24, 0x26	; 38
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 888:	21 2f       	mov	r18, r17
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	4d 2f       	mov	r20, r29
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	6c 2f       	mov	r22, r28
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 48 01 	call	0x290	; 0x290 <scan>
 89a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state+0x1>
 89e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state>
	
	if(p_state != state){			//If there is a change on state a message is sent to uart
 8a2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <p_state.2335>
 8a6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <p_state.2335+0x1>
 8aa:	82 17       	cp	r24, r18
 8ac:	93 07       	cpc	r25, r19
 8ae:	91 f0       	breq	.+36     	; 0x8d4 <__vector_13+0xa2>
		
		if(state == 0){
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	29 f4       	brne	.+10     	; 0x8be <__vector_13+0x8c>
			
			uart_puts(close);
 8b4:	89 e4       	ldi	r24, 0x49	; 73
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
 8bc:	0b c0       	rjmp	.+22     	; 0x8d4 <__vector_13+0xa2>
			
		}else if(state == 1){
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	29 f4       	brne	.+10     	; 0x8cc <__vector_13+0x9a>
			
			uart_puts(open);
 8c2:	8e e5       	ldi	r24, 0x5E	; 94
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__vector_13+0xa2>
			
		}else{
			
			uart_puts(code);
 8cc:	82 e7       	ldi	r24, 0x72	; 114
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
			
		}
		
	}
	
	p_state = state;
 8d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state>
 8d8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <state+0x1>
 8dc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <p_state.2335+0x1>
 8e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <p_state.2335>
	
}
 8e4:	ff 91       	pop	r31
 8e6:	ef 91       	pop	r30
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	bf 91       	pop	r27
 8ee:	af 91       	pop	r26
 8f0:	9f 91       	pop	r25
 8f2:	8f 91       	pop	r24
 8f4:	7f 91       	pop	r23
 8f6:	6f 91       	pop	r22
 8f8:	5f 91       	pop	r21
 8fa:	4f 91       	pop	r20
 8fc:	3f 91       	pop	r19
 8fe:	2f 91       	pop	r18
 900:	1f 91       	pop	r17
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <__vector_18>:
 90c:	1f 92       	push	r1
 90e:	0f 92       	push	r0
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	2f 93       	push	r18
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	ef 93       	push	r30
 91e:	ff 93       	push	r31
 920:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 924:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 928:	8c 71       	andi	r24, 0x1C	; 28
 92a:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <UART_RxHead>
 92e:	ef 5f       	subi	r30, 0xFF	; 255
 930:	ef 71       	andi	r30, 0x1F	; 31
 932:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <UART_RxTail>
 936:	e9 17       	cp	r30, r25
 938:	39 f0       	breq	.+14     	; 0x948 <__vector_18+0x3c>
 93a:	e0 93 a3 01 	sts	0x01A3, r30	; 0x8001a3 <UART_RxHead>
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	ea 55       	subi	r30, 0x5A	; 90
 942:	fe 4f       	sbci	r31, 0xFE	; 254
 944:	20 83       	st	Z, r18
 946:	01 c0       	rjmp	.+2      	; 0x94a <__vector_18+0x3e>
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <UART_LastRxError>
 94e:	89 2b       	or	r24, r25
 950:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <UART_LastRxError>
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_19>:
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	8f 93       	push	r24
 974:	9f 93       	push	r25
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
 97a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <UART_TxHead>
 97e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <UART_TxTail>
 982:	98 17       	cp	r25, r24
 984:	69 f0       	breq	.+26     	; 0x9a0 <__vector_19+0x38>
 986:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <UART_TxTail>
 98a:	ef 5f       	subi	r30, 0xFF	; 255
 98c:	ef 71       	andi	r30, 0x1F	; 31
 98e:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <UART_TxTail>
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	ea 53       	subi	r30, 0x3A	; 58
 996:	fe 4f       	sbci	r31, 0xFE	; 254
 998:	80 81       	ld	r24, Z
 99a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__vector_19+0x42>
 9a0:	e1 ec       	ldi	r30, 0xC1	; 193
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	8f 7d       	andi	r24, 0xDF	; 223
 9a8:	80 83       	st	Z, r24
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	0f 90       	pop	r0
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	0f 90       	pop	r0
 9b8:	1f 90       	pop	r1
 9ba:	18 95       	reti

000009bc <uart_init>:
 9bc:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <UART_TxHead>
 9c0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART_TxTail>
 9c4:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <UART_RxHead>
 9c8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <UART_RxTail>
 9cc:	99 23       	and	r25, r25
 9ce:	1c f4       	brge	.+6      	; 0x9d6 <uart_init+0x1a>
 9d0:	22 e0       	ldi	r18, 0x02	; 2
 9d2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 9d6:	90 78       	andi	r25, 0x80	; 128
 9d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 9dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 9e0:	88 e9       	ldi	r24, 0x98	; 152
 9e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 9e6:	86 e0       	ldi	r24, 0x06	; 6
 9e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 9ec:	08 95       	ret

000009ee <uart_putc>:
 9ee:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <UART_TxHead>
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	2f 71       	andi	r18, 0x1F	; 31
 9f6:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART_TxTail>
 9fa:	29 17       	cp	r18, r25
 9fc:	e1 f3       	breq	.-8      	; 0x9f6 <uart_putc+0x8>
 9fe:	e2 2f       	mov	r30, r18
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	ea 53       	subi	r30, 0x3A	; 58
 a04:	fe 4f       	sbci	r31, 0xFE	; 254
 a06:	80 83       	st	Z, r24
 a08:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <UART_TxHead>
 a0c:	e1 ec       	ldi	r30, 0xC1	; 193
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	80 62       	ori	r24, 0x20	; 32
 a14:	80 83       	st	Z, r24
 a16:	08 95       	ret

00000a18 <uart_puts>:
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	ec 01       	movw	r28, r24
 a1e:	88 81       	ld	r24, Y
 a20:	88 23       	and	r24, r24
 a22:	31 f0       	breq	.+12     	; 0xa30 <uart_puts+0x18>
 a24:	21 96       	adiw	r28, 0x01	; 1
 a26:	0e 94 f7 04 	call	0x9ee	; 0x9ee <uart_putc>
 a2a:	89 91       	ld	r24, Y+
 a2c:	81 11       	cpse	r24, r1
 a2e:	fb cf       	rjmp	.-10     	; 0xa26 <uart_puts+0xe>
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

00000a36 <_exit>:
 a36:	f8 94       	cli

00000a38 <__stop_program>:
 a38:	ff cf       	rjmp	.-2      	; 0xa38 <__stop_program>
