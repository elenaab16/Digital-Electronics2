
Knight Rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	int i = 0;
	int r = 0;
	
	// Set pin as output in Data Direction Register
	// DDRC = DDRC or 0010 0000
	DDRC = DDRC | (1<<LED_RED1);
  96:	38 9a       	sbi	0x07, 0	; 7
	DDRC = DDRC | (1<<LED_RED2);
  98:	39 9a       	sbi	0x07, 1	; 7
	DDRC = DDRC | (1<<LED_RED3);
  9a:	3a 9a       	sbi	0x07, 2	; 7
	DDRC = DDRC | (1<<LED_RED4);
  9c:	3b 9a       	sbi	0x07, 3	; 7
	DDRC = DDRC | (1<<LED_RED5);
  9e:	3c 9a       	sbi	0x07, 4	; 7
	

	// Set pin LOW in Data Register (LED off)
	// PORTC = PORTC and 1101 1111
	PORTC = PORTC | (1<<LED_RED1);
  a0:	40 9a       	sbi	0x08, 0	; 8
	PORTC = PORTC | (1<<LED_RED2);
  a2:	41 9a       	sbi	0x08, 1	; 8
	PORTC = PORTC | (1<<LED_RED3);
  a4:	42 9a       	sbi	0x08, 2	; 8
	PORTC = PORTC | (1<<LED_RED4);
  a6:	43 9a       	sbi	0x08, 3	; 8
	PORTC = PORTC | (1<<LED_RED5);
  a8:	44 9a       	sbi	0x08, 4	; 8
	
	/*PUSH BUTTON*/
	
	DDRD = DDRD & ~(1<<BUTTON);  // input
  aa:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BUTTON); // enable internal pull up 
  ac:	58 9a       	sbi	0x0b, 0	; 11

int main(void)
{
	
	int i = 0;
	int r = 0;
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b0 e0       	ldi	r27, 0x00	; 0
int leds[] ={LED_RED1,LED_RED2,LED_RED3,LED_RED4,LED_RED5};

int main(void)
{
	
	int i = 0;
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(SHORT_DELAY);
		
		PORTC = PORTC | (1<<leds[i]);	
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
			   PORTC = PORTC | (1<<leds[4]);	
			
		   }else if(i == 0){
			
			   r = 0;
			   PORTC = PORTC | (1<<leds[0]);
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	d1 e0       	ldi	r29, 0x01	; 1
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(SHORT_DELAY);
		
		PORTC = PORTC | (1<<leds[i]);	
  c2:	fb 01       	movw	r30, r22
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	e0 50       	subi	r30, 0x00	; 0
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	9c e0       	ldi	r25, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x46>
  dc:	00 00       	nop
  de:	28 b1       	in	r18, 0x08	; 8
  e0:	ca 01       	movw	r24, r20
  e2:	00 80       	ld	r0, Z
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x54>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x50>
  ee:	82 2b       	or	r24, r18
  f0:	88 b9       	out	0x08, r24	; 8
		
		if(bit_is_clear(PIND,BUTTON)){
  f2:	48 99       	sbic	0x09, 0	; 9
  f4:	eb cf       	rjmp	.-42     	; 0xcc <main+0x36>
			
		
		   if(i == 4){	
  f6:	64 30       	cpi	r22, 0x04	; 4
  f8:	71 05       	cpc	r23, r1
  fa:	61 f4       	brne	.+24     	; 0x114 <main+0x7e>
				
			   r = 1;
			   PORTC = PORTC | (1<<leds[4]);	
  fc:	28 b1       	in	r18, 0x08	; 8
  fe:	ca 01       	movw	r24, r20
 100:	08 84       	ldd	r0, Y+8	; 0x08
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x72>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <main+0x6e>
 10c:	82 2b       	or	r24, r18
 10e:	88 b9       	out	0x08, r24	; 8
		if(bit_is_clear(PIND,BUTTON)){
			
		
		   if(i == 4){	
				
			   r = 1;
 110:	da 01       	movw	r26, r20
 112:	15 c0       	rjmp	.+42     	; 0x13e <main+0xa8>
			   PORTC = PORTC | (1<<leds[4]);	
			
		   }else if(i == 0){
 114:	61 15       	cp	r22, r1
 116:	71 05       	cpc	r23, r1
 118:	59 f4       	brne	.+22     	; 0x130 <main+0x9a>
			
			   r = 0;
			   PORTC = PORTC | (1<<leds[0]);
 11a:	28 b1       	in	r18, 0x08	; 8
 11c:	ca 01       	movw	r24, r20
 11e:	08 80       	ld	r0, Y
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x90>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x8c>
 12a:	82 2b       	or	r24, r18
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x9e>
			
		   }
		
		
		   if(r == 0){
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	29 f4       	brne	.+10     	; 0x13e <main+0xa8>
			
			   i++;
 134:	6f 5f       	subi	r22, 0xFF	; 255
 136:	7f 4f       	sbci	r23, 0xFF	; 255
 138:	a0 2f       	mov	r26, r16
 13a:	b1 2f       	mov	r27, r17
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0xac>
			
		   }else{
			
			   i--;
 13e:	61 50       	subi	r22, 0x01	; 1
 140:	71 09       	sbc	r23, r1
			
		   }
		
		
		PORTC = PORTC & ~(1<<leds[i]);	
 142:	98 b1       	in	r25, 0x08	; 8
 144:	fb 01       	movw	r30, r22
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	9a 01       	movw	r18, r20
 150:	00 80       	ld	r0, Z
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0xc2>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <main+0xbe>
 15c:	82 2f       	mov	r24, r18
 15e:	80 95       	com	r24
 160:	89 23       	and	r24, r25
 162:	88 b9       	out	0x08, r24	; 8
 164:	ae cf       	rjmp	.-164    	; 0xc2 <main+0x2c>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
